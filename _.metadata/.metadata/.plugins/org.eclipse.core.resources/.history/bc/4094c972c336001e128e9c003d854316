package Arrays09;
public class array {
	
		//Declear the array
		/*
		int arr[] = new int[2];
		System.out.println(arr[0]);
		System.out.println(arr[1]);
		*/
		
		//Array operation
		/*
		int arr[] = new int[2];
		arr[0] = 5;
		System.out.println(arr[0]);
		*/
		
		//Taking input and printing Array
		/*
		Scanner s = new Scanner(System.in);
		int n = s.nextInt();
		int arr[] = new int[n];
		
		//Taking input
		for(int i = 0;i<n;i++) {
			arr[i] = s.nextInt();
		}
		
		//Printing Array
		for(int i = 0;i<n;i++) {
			System.out.println(arr[i]);
		}
		*/
	
	
		//moving into function
	
		/*
		public static int[] takeInput() {
			Scanner s = new Scanner(System.in);
			int n = s.nextInt();
			int arr[] = new int[n];
			
			//Taking input
			for(int i = 0;i<n;i++) {
				arr[i] = s.nextInt();
			}
			return arr;
		}
		
		public static void printArray(int arr[]) {
			//Printing Array
			for(int i = 0;i< arr.length;i++) {
				System.out.println(arr[i]);
			}
		}
		
		public static void main(String[]args) {
			int arr[] = takeInput();
			printArray(arr);
		}
		*/
	
	//Finding Largest elem in array
	/*
	public static int LargestElem(int[] arr) {
		int max = Integer.MIN_VALUE;
		for(int i = 0;i < arr.length;i++) {
			if(max < arr[i]) {
				max = arr[i];
			}
		}
		return max;
	}
	
	
	public static void main(String[] args) {
		int arr[] = {17,5,8,15};
		int res = LargestElem(arr);
		System.out.println(res);
	}
	*/
	
	//More about data types
	/*
	premitive -int,char,float,double,short,long------store the value 
	non primitive - array,string,scanner	- store the refrence
	
	arr storing refrence of the array where data is store it is also storing length as well
	String- storing refrence of the character where data is store it is also storing
	length as well
	
	Scanner - in scanner s is storing the only refrence of the location where data is stored
	*/
	
	//primitives With Functions
	/*
	public static void incrementArray(int[] inp) {
		inp = new int[7];//by defalut value is 0
		System.out.println(inp.length);
		for (int i = 0; i < inp.length; i++) {
			inp[i] = inp[i]+1;//setting value 1 to every index
		}
	}
	
	public static void printArray(int[] arr) {
		for (int i = 0; i < arr.length; i++) {
			System.out.println(arr[i]);
		}
	}
	
	public static void increment(int i) {
		i++;
	}
	public static void main(String[] args) {
//		int i = 0;
//		increment(i);
//		System.out.println(i);
		
		int arr[] = {1,2,3,4};
		incrementArray(arr);
		printArray(arr);
	}
	*/
	
	/***** Everything in java pass by Value ******/
	//Array With Function
	//SAME
	/*
	public static void incrementArray(int[] inp) {
		inp = new int[7];//by defalut value is 0
		System.out.println(inp.length);
		for (int i = 0; i < inp.length; i++) {
			inp[i] = inp[i]+1;//setting value 1 to every index
		}
	}
	
	public static void printArray(int[] arr) {
		for (int i = 0; i < arr.length; i++) {
			System.out.println(arr[i]);
		}
	}
	
	public static void increment(int i) {
		i++;
	}
	public static void main(String[] args) {
//		int i = 0;
//		increment(i);
//		System.out.println(i);
		
		int arr[] = {1,2,3,4};
		incrementArray(arr);
		printArray(arr);
	}
	*/
	
	//Print All pairs
	/*
	public static void printAllPairs(int[] arr) {
		int n = arr.length;//5
		for(int i = 0;i < n-1;i++) {
			for(int j = i+1;j < n;j++) {
				System.out.println("(" + arr[i] + "," + arr[j] + ")");
			}
		}
	}
	public static void main(String[] args) {
		int[] arr = {1,4,5,6,7};
		printAllPairs(arr);
	*/
	
	/******************* PROBLEM SWAP ALTERNATE ******************/
	/*
	public static int[] swapAlternate(int[] arr) {
		int n = arr.length;
		for(int i = 0; i < n-1; i += 2) {
			if(i+1 < arr.length) {
				int temp = arr[i];
				arr[i] = arr[i+1];
				arr[i+1] = temp;
			}
		}
		return arr;
	}

	public static void printArray(int[] arr) {
		for (int i = 0; i < arr.length; i++) {
			System.out.print(arr[i]+" ");
		}
	}
	
	public static void main(String[] args) {
		int arr[] = {1,2,3,4};
		int[] res = swapAlternate(arr);
		printArray(res);
	}
	*/
	
	/******************* FIND UNIQUE ******************/
	
	//{1,2,2}
	/*
	public static void findUnique(int[] arr) {
		for (int i = 0; i < arr.length-1; i++) {
			for (int j = i+1; j < arr.length; j++) {
				if(arr[i] == arr[j]) {
					return;
				}else {
					System.out.println(arr[i]);
				}
			}
		}
	}
	public static void main(String[] args) {
		int arr[] = {1,2,2};
		findUnique(arr);
	}*/
	
	
	/******************* FIND DUPLICATE ******************/
	/*
	public static int findDuplicate(int[] arr) {
		int sum = 0;
		int n = arr.length;
		for (int i = 0; i < n; i++) {
			sum += arr[i];
		}
		System.out.println("Sum -> "+sum);
		return sum - ((n-2)*(n-1))/2;//35 - 28 = 7
	}
	
	public static void main(String[] args) {
		int arr[] = {0, 7, 2, 5, 4, 7, 1, 3, 6};
		int res = findDuplicate(arr);
		System.out.println(res);
	}
	*/
	
	
	/******************* INTERSECTION OF TWO ARRAYS || ******************/
	/*
	public static void intersectionOfArray(int[] arr1,int[] arr2) {
		
		for (int i = 0; i < arr1.length; i++) {
			for (int j = 0; j < arr2.length; j++) {
				if(arr1[i] == arr2[j]) {
					System.out.println(arr1[i]);
					arr2[j] = Integer.MIN_VALUE;
					break; //BECAUSE IF WE GET AND NUMBER IN THAT CASE WE DONT WANT TO TRAVERSE AFTER THAT
				}
			}
		}
		
	}
	
		
	public static void main(String[] args) {
		int[] arr1 = {2, 6, 8 ,5, 4 ,3,2};
		int[] arr2 = {2 ,3 ,4 ,7 };
		
		intersectionOfArray(arr1,arr2);
	}
	*/
	
	/******************* PAIR SUM ******************/
	/*
	public static void pairSum(int arr[],int k) {
		int count = 0;
		for (int i = 0; i < arr.length-1; i++) {
			for (int j = i+1; j < arr.length; j++) {
				if(arr[i]+arr[j] == k) {
					System.out.println("("+arr[i]+","+arr[j]+")");
					count++;
				}
			}
		}
		System.out.println("count is => "+ count);
	}
	
	public static void main(String[] args) {
		int arr[] = {1, 3, 6, 2, 5, 4, 3, 2, 4};
		int k = 7;
		pairSum(arr,k);
	}
	*/
	
	/******************* TRIPLET SUM ******************/
	/*
	public static void tripletSum(int[] arr,int x) {
		int count = 0;
		for (int i = 0; i < arr.length; i++) {
			for (int j = i+1; j < arr.length; j++) {
				for (int k = j+1; k < arr.length; k++) {
					if(arr[i]+arr[j]+arr[k] == x) {
						count++;
						System.out.println("("+arr[i]+","+arr[j]+","+arr[k]+")");
					}
				}
			}
		}
		System.out.println("count is => "+ count);
	}
	public static void main(String[] args) {
		int arr[] = {1, 2, 3, 4, 5, 6, 7 };
		int k = 12;
		tripletSum(arr,k);
	}
	*/
	
	/******************* SORT 0,1 ******************/
	public static void sort01(int[] arr) {
		int j = arr.length;
		for (int i = 0; i < arr.length; i++) {
			if(arr[i] == 0) {
				i++;
			}
			
			if(arr[j] == 1) {
				j--;
			}
			
			if(arr[i] == 1 & arr[j] == 0) {
				int temp = arr[i];
				arr[i] = arr[j];
				arr[j] = temp;
			}
		}
	}
	public static void main(String[] args) {
		int arr[] = {0 ,1 ,1, 0, 1, 0 ,1};
		sort01(arr);
	}
	
}
